// wer. 0.7.1 sterowanie SET komuniakatem MIDI i uruchomieniw na Atmega644P - dodane Ceresc ale nie sprawdzone.
// Tested for Atmega32A - Bobuino Pin - - - chipSelect = 10; - Encoder encoder(2,3);
// and Atmega644P - Standard Pin - - - chipSelect = 4; - Encoder encoder(10,11);

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Encoder.h> //https://github.com/PaulStoffregen/Encoder
#include <MIDI.h>   // Add Midi Library
#include <SPI.h>
#include <SD.h>

#define SetPin A0
#define CrescendoPin A1
#define analogCrescendoReadPin A2

#define BACKLIGHT_PIN 3

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7);
Encoder encoder(10,11); // Podłącz enkoder do pinów 2 i 3 w UNO and Atmega32A -Bobuinopin // Atmega644P - standard pin do pin 10 i 11
const int chipSelect = 4;
File dataFile;
int displayNrComb = 1; // Zmienna nrBank używana tylko do wyświetlania
int realNrComb = 1;    // Rzeczywista wartość nrBank używana do zmiany
int displayNrBank = 1; // Zmienna nrBank używana tylko do wyświetlania
int realNrBank = 1;    // Rzeczywista wartość nrBank używana do zmiany
int encoderChange = 0; // Zmienna używana do śledzenia zmian enkodera co 4 odczyty

unsigned long BAS_channel_1 = 0; // Flags for MIDI-channel 1
unsigned long TREBL_channel_1 = 0;

unsigned long prev_BAS_channel_1 = 0; // Flags for MIDI-channel 1
unsigned long prev_TREBL_channel_1 = 0;

int nr = 1;

int crescendoGradusPrev = 1;
int crescendoGradus = 1;
int progCrescFlag = 0;
bool crescTouche = false;
unsigned long storeBAS_channel_1 = 0; 
unsigned long storeTREBL_channel_1 = 0;

int storeDisplayNrComb = 1; // Zmienna nrBank używana tylko do wyświetlania
int storeRealNrComb = 1;    // Rzeczywista wartość nrBank używana do zmiany
int storeDisplayNrBank = 1; // Zmienna nrBank używana tylko do wyświetlania
int storeRealNrBank = 1;
int storeNr = nr;


//Create an instance of the library with default name, serial port and settings
MIDI_CREATE_DEFAULT_INSTANCE();
void setup()
{
  MIDI.begin(MIDI_CHANNEL_OMNI); // Initialize the Midi Library.
  // OMNI sets it to listen to all channels.. MIDI.begin(2) would set it
  // to respond to notes on channel 2 only.

  MIDI.turnThruOff(); // Nie przesyła komunikatów z wejscia na wyjscie.

  MIDI.setHandleNoteOn(MyHandleNoteOn); // This is important!! This command
  // tells the Midi Library which function you want to call when a NOTE ON command
  // is received. In this case it's "MyHandleNoteOn".
  MIDI.setHandleNoteOff(MyHandleNoteOff); // This command tells the Midi Library
  // to call "MyHandleNoteOff" when a NOTE OFF command is received.

  lcd.begin(16, 2);
  lcd.setBacklightPin(BACKLIGHT_PIN, POSITIVE);
  lcd.setBacklight(HIGH);

  lcd.home();
  lcd.print("Comb nr");

  if (!SD.begin(chipSelect)) {
    lcd.home();
    lcd.print("Card SD Error!");
    return;
  } else{
    lcd.home();
    lcd.print("Card SD Ok!");
  }
  pinMode(SetPin, OUTPUT);
  digitalWrite(SetPin, HIGH);
  pinMode(CrescendoPin, OUTPUT);
  digitalWrite(CrescendoPin, HIGH);
  pinMode(analogCrescendoReadPin, INPUT);
 
    char fileName[13]; // Długość nazwy pliku nie przekracza 8 znaków + 1 znak rozszerzenia + 4 znaki numeru pliku (1, 2, 3...)
    sprintf(fileName, "C%dB%d.txt", nr, realNrBank);
}

void loop()
{
  MIDI.read(); // Continuously check if Midi data has been received.
  senderMidi();
  cresc();
  //writeToSDCard();
  // Odczytaj zmianę enkodera co 4 odczyty i zaktualizuj zmienną encoderChange
  long newPosition = encoder.read();
  static int lastEncoderPosition = 0;
  if (newPosition != lastEncoderPosition)
  {
    encoderChange += newPosition - lastEncoderPosition;
    lastEncoderPosition = newPosition;

    if (abs(encoderChange) >= 4)
    {
      // Aktualizuj rzeczywistą wartość realNrBank co 4 odczyty enkodera
      if (encoderChange > 0)
        realNrBank = constrain(realNrBank - 1, 0, 257); // Zmniejsz realNrBank o 1
      else
        realNrBank = constrain(realNrBank + 1, 0, 257); // Zwiększ realNrBank o 1

      encoderChange = 0; // Zresetuj zmienną encoderChange

      // Sprawdź i popraw wartość realNrBank, jeśli przekroczy 256 lub spadnie poniżej 1
      checkNrBankLimits();
    }
  }

  // Sprawdź, czy rzeczywista wartość realNrBank się zmieniła
  static int lastRealNrBank = 0;
  if (realNrBank != lastRealNrBank)
  {
    // Aktualizuj wartość wyświetlanej zmiennej displayNrBank
    displayNrBank = realNrBank;
    // Wyświetl wartość displayNrBank na drugim wierszu wyświetlacza LCD
    lcd.setCursor(0, 1);
    lcd.print("Bank nr         "); // Czyszczenie starej wartości
    lcd.setCursor(8, 1);
    lcd.print(displayNrBank);

    lastRealNrBank = realNrBank; // Zapisz aktualną wartość realNrBank jako poprzednią
  }

  // Twój pozostały kod
  // ...
}

void checkNrBankLimits()
{
  // Sprawdź, czy rzeczywista wartość realNrBank przekroczyła 256 lub spadła poniżej 1
  if (realNrBank > 256)
    realNrBank = 1;
  else if (realNrBank < 1)
    realNrBank = 256;
}
// $$$$$$$$$$$$$$$$$$$$$$ GDY MIDI ON $$$$$$$$$$$$$$$$$$$
//__________________________________________________________
//
// MyHandleNoteON is the function that will be called by the Midi Library
// when a MIDI NOTE ON message is received.
// It will be passed bytes for Channel, Pitch, and Velocity

void MyHandleNoteOn(byte channel, byte pitch, byte velocity) {
   if (pitch == 89) {
    digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)

     BAS_channel_1 =   storeBAS_channel_1; 
     TREBL_channel_1 = storeTREBL_channel_1;

     displayNrComb = storeDisplayNrComb; 
     realNrComb = storeRealNrComb;    
     displayNrBank = storeDisplayNrBank; 
     realNrBank = storeRealNrBank;
     nr = storeNr;
     
     lcd.setCursor(0, 0);
     lcd.print("Comb nr         "); // Czyszczenie starej wartości
     lcd.setCursor(8, 0);
     lcd.print(nr);

  }
{
   if (pitch == 88) {
    digitalWrite(CrescendoPin, LOW); // Włączenie crescendo (C)
    crescTouche = true; // dopuki trzymamy przycisk C ta flaga jest true
    if (digitalRead(SetPin) == HIGH)
    storeBAS_channel_1 = BAS_channel_1; 
    storeTREBL_channel_1 = TREBL_channel_1;

    storeDisplayNrComb = displayNrComb; 
    storeRealNrComb = realNrComb;    
    storeDisplayNrBank = displayNrBank; 
    storeRealNrBank =  realNrBank;
    storeNr = nr;
    lcd.setCursor(0, 0);
    lcd.print("Cresc         "); // Czyszczenie starej wartości
    lcd.setCursor(8, 0);
    lcd.print(crescendoGradus);
    crescReadToSDCard();
    }
  
  }
  if (pitch == 87){
    digitalWrite(SetPin, LOW); // nacisniecie SET (S)
  }
 
  // *************************************Sekcja gdy ncisięty prycisk SET******************
  if (digitalRead(SetPin) == LOW){
   
    // Programowanie ctescendo
    if (pitch == 88){
     // if (CrescendoPin == LOW && crescTouche == true){
       // progCrescFlag = 1; 
        progCrescendo();
       
      //}
    }

    // zapamiętanie wolnych kombinacji nr...
    if (pitch == 76){
    nr = 1;
    writeToSDCard();
  
  }
    if (pitch == 77){
    nr = 2;
    writeToSDCard();
  
  
  }
    if (pitch == 78){
    nr = 3;
    writeToSDCard();
  
  
  }
    if (pitch == 79){
    nr = 4;
    writeToSDCard();
  
  
  }
    if (pitch == 80){
    nr = 5;
    writeToSDCard();
  
  
  }
    if (pitch == 81){
    nr = 6;
    writeToSDCard();
  
  
  }
    if (pitch == 82){
    nr = 7;
    writeToSDCard();
  
  
  }
    if (pitch == 83){
    nr = 8;
    writeToSDCard();
  
  
  }


  // przycisk > (next) + SET zmiana banku na plus
       if (pitch == 85){
        

         
    
  
      realNrBank++;
      if (realNrBank > 256){
        realNrBank = 1;
        displayNrBank = realNrBank;
      }

    if (digitalRead(CrescendoPin) == HIGH ){  
    readToSDCard();
    }else{
      lcd.setCursor(0, 0);
      lcd.print("Step          "); // Czyszczenie starej wartości
      lcd.setCursor(8, 0);
      lcd.print(realNrBank);
    }
  }
//prycisk < (previous) + SET - zmiana banku na minus
    if (pitch == 86){
  
      realNrBank--;
      if (realNrBank < 1){
        realNrBank = 256;
        displayNrBank = realNrBank;
    
    }
     if (digitalRead(CrescendoPin) == HIGH ){  
     readToSDCard();
      }else{
      lcd.setCursor(0, 0);
      lcd.print("Step          "); // Czyszczenie starej wartości
      lcd.setCursor(8, 0);
      lcd.print(realNrBank);
    } 
  }
} 

//**************KONIEC sekcji z nacisnietym przyciskiem SET*****************
  // włącznie kombinaci CombON   
  if (pitch == 76){
    digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 1;
    readToSDCard();
  
  }
   if (pitch == 77){
    digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 2;
    readToSDCard();
  
  }
     if (pitch == 78){
      digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 3;
    readToSDCard();
  
  }
     if (pitch == 79){
      digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 4;
    readToSDCard();
  
  }
     if (pitch == 80){
      digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 5;
    readToSDCard();
  
  }
     if (pitch == 81){
      digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 6;
    readToSDCard();
  
  }
     if (pitch == 82){
      digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 7;
    readToSDCard();
  
  }
     if (pitch == 83){
      digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr = 8;
    readToSDCard();
  
  }
  // ksownik
     if (pitch == 84){
      digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    //nr = 0;
    //readToSDCard();
    BAS_channel_1=0;
    TREBL_channel_1=0;
    lcd.setCursor(0, 0);
    lcd.print("Kasownik  0     ");
   
  

  }
if (digitalRead(SetPin) == HIGH){
  // przycisk > (next)
       if (pitch == 85){
        digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A) 
    nr++;
    if (nr > 8 ){
      nr = 1;
      realNrBank++;
      if (realNrBank > 256){
        realNrBank = 1;
        displayNrBank = realNrBank;
      }
    }
    readToSDCard();
  
  }
//prycisk < (previous)
    if (pitch == 86){
       digitalWrite(CrescendoPin, HIGH); // Anulowanie działania crescendo (A)
    nr--;
    if (nr < 1 ){
      nr = 8;
      realNrBank--;
      if (realNrBank < 1){
        realNrBank = 256;
        displayNrBank = realNrBank;
      }
    }
    readToSDCard();
  
  }
} 
//----------------Aktualizacja flag kanałwych------------  
  if (channel == 1){ //ustawianie flag dla kanału 1
    
          if (pitch >= 36 && pitch <= 67){
             if ((bitRead(BAS_channel_1, pitch - 36)) == LOW){ 
             bitSet(BAS_channel_1, pitch - 36);
             } else {
               bitClear(BAS_channel_1, pitch - 36);
               }
          }
  
          if (pitch >= 68 && pitch <= 100){
            if ((bitRead(TREBL_channel_1, pitch - 68)) == LOW){
            bitSet(TREBL_channel_1, pitch - 68);
            } else {
              bitClear(TREBL_channel_1, pitch - 68);
            }
          }
      }
//-----------------------------Koniec Aktualizacji flag Kanałowych--------------          
}

//$$$$$$$$$$$$$$$$$ KONIEC midi IN $$$$$$$$$$$$$$$$$$$$$$
//______________________________________________________

// ###################### GDY MIDI OFF ###################
// MyHandleNoteOFF is the function that will be called by the Midi Library
// when a MIDI NOTE OFF message is received.
// * A NOTE ON message with Velocity = 0 will be treated as a NOTE OFF message *
// It will be passed bytes for Channel, Pitch, and Velocity

void MyHandleNoteOff(byte channel, byte pitch, byte velocity) {
  if (pitch == 88){
    crescTouche = false; // gdy puścimy  przycisk C ta flaga staje się false
    progCrescFlag = 0;
  }


  if (pitch == 87){
    digitalWrite(SetPin, HIGH);
  
  }

/*
  // Obsługa noteOFF
  if (channel == 1) {
    
   if (pitch >= 36 && pitch <= 67){ // gaszenie flag Bas
      bitClear(BAS_channel_1, pitch - 36);
    }
  
    if (pitch >= 68 && pitch <= 101){ // gaszenie flag Trebll
      bitClear(TREBL_channel_1, pitch - 68);
    }       
  }
  */   
}
// #################### Koniec midi off ###############
void senderMidi(){
  int pitch = 0;
  int channel = 1;
  int velocity = 127;
  if (prev_BAS_channel_1 != BAS_channel_1) {
  
     for (int i = 36; i <= 67; i++){
          if ((bitRead(BAS_channel_1, i - 36) == HIGH) && (bitRead(prev_BAS_channel_1, i - 36) == LOW)) {
          pitch =  i;
          channel = 1;
          MIDI.sendNoteOn (pitch, velocity, channel);
          }
          if ((bitRead(BAS_channel_1, i - 36) == LOW) && (bitRead(prev_BAS_channel_1, i - 36) == HIGH)) {
          pitch =  i;
          channel = 1;
          MIDI.sendNoteOff (pitch, velocity, channel);
          }
      }
    prev_BAS_channel_1 = BAS_channel_1;
    }


   if (prev_TREBL_channel_1 != TREBL_channel_1) {
  
       for (int i = 68; i <= 100; i++){
          if ((bitRead(TREBL_channel_1, i - 68) == HIGH) & (bitRead(prev_TREBL_channel_1, i - 68) == LOW)) {
          pitch =  i;
          channel = 1;
          MIDI.sendNoteOn (pitch, velocity, channel);
          }
          if ((bitRead(TREBL_channel_1, i - 68) == LOW) & (bitRead(prev_TREBL_channel_1, i - 68) == HIGH)) {
          pitch =  i;
          channel = 1;
          MIDI.sendNoteOff (pitch, velocity, channel);
          }
      }
   prev_TREBL_channel_1 = TREBL_channel_1; 
   }

}



void writeToSDCard(){
   char fileName[13]; // Długość nazwy pliku nie przekracza 8 znaków + 1 znak rozszerzenia + 4 znaki numeru pliku (1, 2, 3...)
   sprintf(fileName, "C%dB%d.txt", nr, realNrBank);
   if (SD.exists(fileName)){
     SD.remove(fileName);
   }
   dataFile = SD.open(fileName, FILE_WRITE);

     if (dataFile) {
      dataFile.print(BAS_channel_1);
      dataFile.print(",");
      dataFile.println(TREBL_channel_1);
      dataFile.close();
      lcd.home();
      lcd.print("Zapisano OK.");
      delay(100);
  } else {
    lcd.home();
    lcd.print("Error open file!");
      delay(100);
  
  }
lcd.setCursor(0, 0);
lcd.print("Comb nr         "); // Czyszczenie starej wartości
lcd.setCursor(8, 0);
lcd.print(nr); 
}

void readToSDCard(){
  char fileName[13]; // Długość nazwy pliku nie przekracza 8 znaków + 1 znak rozszerzenia + 4 znaki numeru pliku (1, 2, 3...)
  sprintf(fileName, "C%dB%d.txt", nr, realNrBank);
  dataFile = SD.open(fileName);

  if (dataFile) {
    // Odczytaj dane z pliku i przypisz je do zmiennych BAS_channel_1 iTREBL_channel_1
    char buffer[30]; // Bufor na odczytane dane
    dataFile.readBytesUntil('\n', buffer, sizeof(buffer));

    // Użyj funkcji sscanf do analizy danych w buforze
    sscanf(buffer, "%lu,%lu", &BAS_channel_1, &TREBL_channel_1);

    dataFile.close();
  } else {
    lcd.home();
    lcd.print("File no exist. Tworzę nowy plik.");

    // Jeśli plik nie istnieje, utwórz go i wypełnij zerami
    dataFile = SD.open(fileName, FILE_WRITE);
    if (dataFile) {
      dataFile.print(0);
      dataFile.print(",");
      dataFile.println(0);
      dataFile.close();
      // a nastepnie odczytaj
       if (dataFile) {
       // Odczytaj dane z pliku i przypisz je do zmiennych BAS_channel_1 iTREBL_channel_1
       char buffer[30]; // Bufor na odczytane dane
       dataFile.readBytesUntil('\n', buffer, sizeof(buffer));

       // Użyj funkcji sscanf do analizy danych w buforze
       sscanf(buffer, "%lu,%lu", &BAS_channel_1, &TREBL_channel_1);

       dataFile.close();
    }
    lcd.home();
      lcd.print("Reading OK.");
  } else {
    lcd.home();
    lcd.print("Error open file!");
    }
  }

lcd.setCursor(0, 0);
lcd.print("Comb nr         "); // Czyszczenie starej wartości
lcd.setCursor(8, 0);
lcd.print(nr);


}
void cresc(){
  if (digitalRead(CrescendoPin) == LOW){
   
     crescendoGradus = ((analogRead(analogCrescendoReadPin) * 20.0) / 1024.0);
     if (crescendoGradus != crescendoGradusPrev){
      //tu wykonue procedure odczytu ustawień z karty SC dla cresc
      crescReadToSDCard();
     
    }
  }
crescendoGradusPrev = crescendoGradus;
}

void crescReadToSDCard(){
  char fileName[13]; // Długość nazwy pliku nie przekracza 8 znaków + 1 znak rozszerzenia + 4 znaki numeru pliku (1, 2, 3...)
  sprintf(fileName, "Cr%d.txt", crescendoGradus);
  dataFile = SD.open(fileName);

  if (dataFile) {
    // Odczytaj dane z pliku i przypisz je do zmiennych BAS_channel_1 iTREBL_channel_1
    char buffer[30]; // Bufor na odczytane dane
    dataFile.readBytesUntil('\n', buffer, sizeof(buffer));

    // Użyj funkcji sscanf do analizy danych w buforze
    sscanf(buffer, "%lu,%lu", &BAS_channel_1, &TREBL_channel_1);

    dataFile.close();
  } else {
    lcd.home();
    lcd.print("File no exist. Tworzę nowy plik.");

    // Jeśli plik nie istnieje, utwórz go i wypełnij zerami
    dataFile = SD.open(fileName, FILE_WRITE);
    if (dataFile) {
      dataFile.print(0);
      dataFile.print(",");
      dataFile.println(0);
      dataFile.close();
      // a nastepnie odczytaj
       if (dataFile) {
       // Odczytaj dane z pliku i przypisz je do zmiennych BAS_channel_1 iTREBL_channel_1
       char buffer[30]; // Bufor na odczytane dane
       dataFile.readBytesUntil('\n', buffer, sizeof(buffer));

       // Użyj funkcji sscanf do analizy danych w buforze
       sscanf(buffer, "%lu,%lu", &BAS_channel_1, &TREBL_channel_1);

       dataFile.close();
    }
    lcd.home();
      lcd.print("Zapisano OK.");
  } else {
    lcd.home();
    lcd.print("Error open file!");
    }
  }

lcd.setCursor(0, 0);
lcd.print("Cresc         "); // Czyszczenie starej wartości
lcd.setCursor(8, 0);
lcd.print(crescendoGradus);


}
void progCrescendo(){
 // if (progCrescFlag = 1){
  if (realNrBank <= 20 && realNrBank > 0){
     lcd.setCursor(0, 0);
     lcd.print("ProgCrescStep        "); // Czyszczenie starej wartości
     lcd.setCursor(14, 0);
     lcd.print(realNrBank);
     delay (500);
     crescendoWriteToSDCard();
     }
 // progCrescFlag = 0;
 //}
}



void crescendoWriteToSDCard(){
   char fileName[13]; // Długość nazwy pliku nie przekracza 8 znaków + 1 znak rozszerzenia + 4 znaki numeru pliku (1, 2, 3...)
   sprintf(fileName, "Cr%d.txt", realNrBank);
   if (SD.exists(fileName)){
     SD.remove(fileName);
   }
   dataFile = SD.open(fileName, FILE_WRITE);

     if (dataFile) {
      dataFile.print(BAS_channel_1);
      dataFile.print(",");
      dataFile.println(TREBL_channel_1);
      dataFile.close();
      lcd.home();
      lcd.print("Zapisano OK.");
  } else {
    lcd.home();
    lcd.print("Error open file!");
   delay (500);
  }
   lcd.setCursor(0, 0);
   lcd.print("Cresc         "); // Czyszczenie starej wartości
   lcd.setCursor(8, 0);
   lcd.print(crescendoGradus);

}
